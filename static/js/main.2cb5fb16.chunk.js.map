{"version":3,"sources":["components/feedback/feedback.css.jsx","components/feedback/feedbackOptions/index.jsx","components/feedback/feedbackOptions/feedbackOptions.jsx","components/feedback/notification/notification.jsx","components/feedback/notification/index.jsx","components/feedback/section/section.jsx","components/feedback/section/index.jsx","components/feedback/statistics/statistics.jsx","components/feedback/statistics/index.jsx","components/feedback/feedback.jsx","components/feedback/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["TitleEl","styled","h2","ButtonEl","button","StatisticItemEl","span","FeedbackOptions","options","onLeaveFeedback","buttonsList","map","name","Object","values","value","keys","type","onClick","Notification","message","defaultProps","Section","title","children","Statistics","good","neutral","bad","total","positivePercentage","Feedback","countTotalFeedback","props","countPositiveFeedbackPercentage","Math","round","this","onBtnClick","Component","App","event","target","setState","prevValue","state","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2cb5fb16.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nconst TitleEl = styled.h2`\r\n\tfont-size: 2em;\r\n`;\r\n\r\nconst ButtonEl = styled.button`\r\n\tmargin: 10px;\r\n\tpadding: 5px 10px;\r\n\tfont-size: 1.3em;\r\n`;\r\n\r\nconst StatisticItemEl = styled.span`\r\n\tdisplay: block;\r\n\tmargin: 5px;\r\n\tfont-size: 1.5em;\r\n`;\r\n\r\nexport { TitleEl, ButtonEl, StatisticItemEl };","import FeedbackOptions from './feedbackOptions';\r\nexport default FeedbackOptions;","import { Fragment } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { ButtonEl } from '../feedback.css.jsx'\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n\tconst buttonsList = options.map((button) => {\r\n\t\tconst name = Object.values(button);\r\n\t\tconst value = Object.keys(button);\r\n\t\treturn <ButtonEl type=\"button\" key={value} value={value} onClick={onLeaveFeedback}>{name}</ButtonEl>\r\n\t})\r\n\t\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t{buttonsList}\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n\toptions: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n\tonLeaveFeedback: PropTypes.func\r\n};\r\n\r\nexport default FeedbackOptions;","import PropTypes from 'prop-types'\r\n\r\nconst Notification = ({ message }) => {\r\n\treturn (\r\n\t\t<p>{message}</p>\r\n\t)\r\n}\r\n\r\nNotification.defaultProps = {\r\n\tmessage: ''\r\n}\r\n\r\nNotification.propTypes = {\r\n\tmessage: PropTypes.string\r\n}\r\n\r\nexport default Notification;","import Notification from './notification';\r\nexport default Notification;","import PropTypes from 'prop-types'\r\n\r\nimport {TitleEl} from '../feedback.css.jsx'\r\n\r\nconst Section = ({ title, children }) => {\r\n\treturn (\r\n\t\t<section>\r\n\t\t\t<TitleEl>{title}</TitleEl>\r\n\t\t\t{children}\r\n\t\t</section>\r\n\t)\r\n}\r\n\r\nSection.defaultProps = {\r\n\ttitle: ''\r\n}\r\n\r\nSection.propTypes = {\r\n\ttitle: PropTypes.string\r\n}\r\n\r\nexport default Section;","import Section from './section';\r\nexport default Section;","import PropTypes from 'prop-types';\r\n\r\nimport {StatisticItemEl} from '../feedback.css.jsx'\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<StatisticItemEl>Good: {good}</StatisticItemEl>\r\n\t\t\t<StatisticItemEl>Neutral: {neutral}</StatisticItemEl>\r\n\t\t\t<StatisticItemEl>Bad: {bad}</StatisticItemEl>\r\n\t\t\t<StatisticItemEl>Total: {total}</StatisticItemEl>\r\n\t\t\t<StatisticItemEl>Positive feedback: {positivePercentage}%</StatisticItemEl>\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\nStatistics.defaultProps = {\r\n\tneutral: 0,\r\n\tgood: 0,\r\n\tbad: 0,\r\n\ttotal: 0,\r\n\tpositivePercentage: 0\r\n};\r\n\r\nStatistics.propTypes = {\r\n\tneutral: PropTypes.number,\r\n\tgood: PropTypes.number,\r\n\tbad: PropTypes.number,\r\n\ttotal: PropTypes.number,\r\n\tpositivePercentage: PropTypes.number\r\n};\r\n\r\nexport default Statistics;","import Statistics from './statistics';\r\n\r\nexport default Statistics;","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport FeedbackOptions from './feedbackOptions'\r\nimport Notification from './notification'\r\nimport Section from './section'\r\nimport Statistics from './statistics'\r\n\r\nclass Feedback extends Component {\r\n\r\n\tcountTotalFeedback = () => {\r\n\t\tconst { good, neutral, bad } = this.props;\r\n\t\treturn good + neutral + bad;\r\n\t}\r\n\r\n\tcountPositiveFeedbackPercentage = () => {\r\n\t\treturn this.props.good > 0 ? Math.round(this.props.good * 100 / this.countTotalFeedback()) : 0;\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { good, neutral, bad, onBtnClick } = this.props;\r\n\t\t// console.log(this.props);\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<Section title='Please leave feedback'>\r\n\t\t\t\t\t<FeedbackOptions\r\n\t\t\t\t\t\toptions={[{ good: 'Good' },  { neutral: 'Neutral' }, { bad: 'Bad' }] }\r\n\t\t\t\t\t\tonLeaveFeedback={onBtnClick}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Section>\r\n\t\t\t\t<Section title='Statistics'>\r\n\t\t\t\t\t{this.countTotalFeedback() > 0 ?\r\n\t\t\t\t\t\t<Statistics\r\n\t\t\t\t\t\t\tgood={good}\r\n\t\t\t\t\t\t\tneutral={neutral}\r\n\t\t\t\t\t\t\tbad={bad}\r\n\t\t\t\t\t\t\ttotal={this.countTotalFeedback()}\r\n\t\t\t\t\t\t\tpositivePercentage={this.countPositiveFeedbackPercentage()}\r\n\t\t\t\t\t\t/> :\r\n\t\t\t\t\t\t<Notification message=\"No feedback given\"></Notification>\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t</Section>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nFeedback.defaultProps = {\r\n\tgood: 0,\r\n\tneutral: 0,\r\n\tbad: 0,\r\n}\r\n\r\nFeedback.propTypes = {\r\n\tgood: PropTypes.number,\r\n\tneutral: PropTypes.number,\r\n\tbad: PropTypes.number,\r\n\tonBtnClick: PropTypes.func\r\n}\r\n\r\nexport default Feedback;","import Feedback from './feedback';\r\n\r\nexport default Feedback;","import './App.css';\nimport { Component } from 'react';\nimport Feedback from './components/feedback';\n\n\nclass App extends Component {\n  constructor(props) {\n\t\tsuper(props)\n\n\t\tthis.state = {\n\t\t\tgood: 0,\n\t\t\tneutral: 0,\n\t\t\tbad: 0\n\t\t}\n  }\n  \n  onBtnClick = (event) => {\n\t\tconst value = event.target.value;\n\t\tthis.setState(prevValue =>\n\t\t{\n\t\t\treturn {\n\t\t\t\t[value]: prevValue[value] + 1\n\t\t\t};\n\t\t});\n\t}\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Feedback\n          good={this.state.good}\n          neutral={this.state.neutral}\n          bad={this.state.bad}\n          onBtnClick={this.onBtnClick}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}